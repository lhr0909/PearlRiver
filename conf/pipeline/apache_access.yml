- type: pattern
  token: "*"
  target: message

- type: geoip
  token: "*"
  target: clientip

- type: timestamp
  target: timestamp
  token: "*"

- type: user-agent
  target: agent
  token: "*"

- type: split
  target: request
  token: "*"
  args:
      delimiter: "\\?"
      max_split: "2"
      names:
        - "request_path"
        - "request_params"

- type: kv
  target: request_params
  token: "*"
  field:
    - prefix: "request_param_"
  args:
      delimiter: "&"
      sub_delimiter: "="

#- type: regex-based-anomaly-detection
#  token: "*"
#  require:
#    - "global.type match ^apache_access|nginx_access$"
#  args:
#    - params: [
#        ["request", "(?i).*(\\.\\./\\.\\.|echo|cmd\\.exe|root\\.exe|_mem_bin|msadc|winnt|boot\\.ini).*", "anomaly_directory_traversal", "error"],
#        ["request", "(?i).*(<script>|src=javascript).*", "anomaly_xss", "error"],
#        ["request", "(?i).*(\\?-d|\\?-s|\\?-a|\\?-b|\\?-w).*", "anomaly_php_cgi", "error"],
#        ["request", "(?i).*(char\\(\\d+\\)).*", "anomaly_mssql_injection", "error"],
#        ["response", "(500|501|503)", "anomaly_server_error", "error"],
#        ["request", "(?i).*(select.*from.*(where)?|insert|union).*", "anomaly_sql_injection", "error"],
#      ]
#
#- type: regex-based-anomaly-detection
#  token: "*"
#  require:
#    - "global.type==apache_error"
#  args:
#    - params: [
#        ["msg", "(?i).*(exit signal segmentation fault).*", "anomaly_segmentation_fault", "error"],
#        ["msg", "(?i).*((denied by server configuration)|((file does not exist)|(failed to open stream: no such file or directory))).*", "anomaly_denied", "warn"],
#        ["msg", "(?i).*(client sent malformed host header).*", "anomaly_code_red", "error"],
#        ["msg", "(?i).*((authentication failed)|((user .* not found)|(user .* in realm .* not found))|(authentication failure)).*", "anomaly_authentication", "warn"],
#        ["msg", "(?i).*((invalid uri in request)|((file name too long)|(request failed: uri too long))).*", "anomaly_illegal_url", "warn"],
#      ]
#
#- type: regex-based-anomaly-detection
#  token: "*"
#  require:
#    - "global.type==nginx_error"
#  args:
#    - params: [
#        ["errormsg", "(?i).*(exit signal segmentation fault).*", "anomaly_segmentation_fault", "error"],
#        ["errormsg", "(?i).*((denied by server configuration)|((file does not exist)|(failed to open stream: no such file or directory))).*", "anomaly_denied", "warn"],
#        ["errormsg", "(?i).*(client sent malformed host header).*", "anomaly_code_red", "error"],
#        ["errormsg", "(?i).*((authentication failed)|((user .* not found)|(user .* in realm .* not found))|(authentication failure)).*", "anomaly_authentication", "warn"],
#        ["errormsg", "(?i).*((invalid uri in request)|((file name too long)|(request failed: uri too long))).*", "anomaly_illegal_url", "warn"],
#      ]

#目前无法对MySQL日志做异常检测,因为Pipeline目前所处理的日志种类中不包含此种日志。
#另外,如下所提供的规则的准确性亦存疑。
#- type: regex-based-anomaly-detection
#  token: "*"
#  require:
#    - "global.type==mysql_error"
#  args:
#    - params: [
#        ["", "(?i).*(MySQL log: \\d+ \\S+ \\d+ Connect).*", "anomaly_mysql_succeed", "info"],
#        ["", "(?i).*(Access denied for user).*", "anomaly_mysql_fail", "warn"],
#        ["", "(?i).*(MySQL log: \\d+ \\S+ \\d+ Query).*", "anomaly_mysql_query", "info"],
#        ["", "(?i).*((mysqld ended)|(shutdown complete)).*", "anomaly_mysql_shutdown", "error"],
#        ["", "(?i).*((mysqld started)|(mysqld restarted)).*", "anomaly_mysql_start", "info"],
#        ["", "(?i).*((MySQL log: \\d+ \\S+ \\d+ \\[ERROR\\])|(Fatal error:)).*", "anomaly_mysql_error", "error"],
#      ]

#- type: random-anomaly-detection
#  token: "*"
#  require:
#    - "global.type match ^apache_access|nginx_access$"
#  args:
#    - percentage: 5.0
#      distribution: [["error", "10"], ["unknown", "20"], ["warn", "30"], ["info", "40"]]
#      anomalies: ["anomaly_demo"]
